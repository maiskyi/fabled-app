/* eslint-disable no-redeclare */
// @ts-nocheck

/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * Fabled API
 * Fabled API Documentation
 * OpenAPI spec version: 1.0
 */
export type GetStoriesStatus =
  (typeof GetStoriesStatus)[keyof typeof GetStoriesStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetStoriesStatus = {
  failed: 'failed',
  inprogress: 'inprogress',
  success: 'success',
} as const;

export type GetStoriesParams = {
  status?: GetStoriesStatus;
  take?: number;
  skip?: number;
};

export type GetBootstrapParams = {
  image?: ImageTransformationQuery;
};

export interface StoryImage {
  publicId: string;
}

export interface Story {
  content: string;
  id: string;
  image: StoryImage;
  readTime: number;
  title: string;
}

export interface StoriesItem {
  id: string;
  image: StoryImage;
  readTime: number;
  title: string;
}

export interface Stories {
  data: StoriesItem[];
  total: number;
}

export interface Config {
  privacyPolicyUrl: string;
  termsAndConditionsUrl: string;
}

export interface PromptItem {
  id: string;
  message: string;
}

export interface PlaceOfEventItem {
  id: string;
  image: string;
  title: string;
}

export interface CharacterItem {
  description: string;
  id: string;
  image: string;
  title: string;
}

export interface MoralLessonsItem {
  description: string;
  id: string;
  title: string;
}

export interface Bootstrap {
  characters: CharacterItem[];
  config: Config;
  moralLessons: MoralLessonsItem[];
  placeOfEvents: PlaceOfEventItem[];
  prompts: PromptItem[];
}

export type ImageTransformationQueryCrop =
  (typeof ImageTransformationQueryCrop)[keyof typeof ImageTransformationQueryCrop];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImageTransformationQueryCrop = {
  crop: 'crop',
  fill: 'fill',
  fit: 'fit',
  imagga_crop: 'imagga_crop',
  imagga_scale: 'imagga_scale',
  lfill: 'lfill',
  limit: 'limit',
  lpad: 'lpad',
  mfit: 'mfit',
  mpad: 'mpad',
  pad: 'pad',
  scale: 'scale',
  thumb: 'thumb',
} as const;

export interface ImageTransformationQuery {
  crop?: ImageTransformationQueryCrop;
  height?: number;
  width?: number;
}

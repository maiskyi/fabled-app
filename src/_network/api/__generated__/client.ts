// @ts-nocheck

/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * Fabled API
 * Fabled API Documentation
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  Bootstrap,
  CreateFeedbackRequest,
  CreateFeedbackResponse,
  CreateInquiryRequest,
  CreateStoryRequest,
  CreateStoryResponse,
  GetBootstrapParams,
  GetDatabaseUrlResponse,
  GetStoriesParams,
  GetStoryParams,
  HttpExceptionResponse,
  Stories,
  Story,
} from "./client.schemas";
import { useCustomInstance } from "../hooks/useCustomInstance/index";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const useGetDatabaseUrlControllerGetDatabaseUrlHook = () => {
  const getDatabaseUrlControllerGetDatabaseUrl =
    useCustomInstance<GetDatabaseUrlResponse>();

  return (
    options?: SecondParameter<ReturnType<typeof useCustomInstance>>,
    signal?: AbortSignal,
  ) => {
    return getDatabaseUrlControllerGetDatabaseUrl(
      { url: `/api/system/database-url`, method: "get", signal },
      options,
    );
  };
};

export const getGetDatabaseUrlControllerGetDatabaseUrlQueryKey = () => {
  return [`/api/system/database-url`] as const;
};

export const useGetDatabaseUrlControllerGetDatabaseUrlInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<
      ReturnType<
        ReturnType<typeof useGetDatabaseUrlControllerGetDatabaseUrlHook>
      >
    >
  >,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<
        ReturnType<
          ReturnType<typeof useGetDatabaseUrlControllerGetDatabaseUrlHook>
        >
      >,
      TError,
      TData
    >
  >;
  request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetDatabaseUrlControllerGetDatabaseUrlQueryKey();

  const getDatabaseUrlControllerGetDatabaseUrl =
    useGetDatabaseUrlControllerGetDatabaseUrlHook();

  const queryFn: QueryFunction<
    Awaited<
      ReturnType<
        ReturnType<typeof useGetDatabaseUrlControllerGetDatabaseUrlHook>
      >
    >
  > = ({ signal }) =>
    getDatabaseUrlControllerGetDatabaseUrl(requestOptions, signal);

  return {
    queryKey,
    queryFn,
    cacheTime: 0,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<
      ReturnType<
        ReturnType<typeof useGetDatabaseUrlControllerGetDatabaseUrlHook>
      >
    >,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDatabaseUrlControllerGetDatabaseUrlInfiniteQueryResult =
  NonNullable<
    Awaited<
      ReturnType<
        ReturnType<typeof useGetDatabaseUrlControllerGetDatabaseUrlHook>
      >
    >
  >;
export type GetDatabaseUrlControllerGetDatabaseUrlInfiniteQueryError = unknown;

export const useGetDatabaseUrlControllerGetDatabaseUrlInfinite = <
  TData = InfiniteData<
    Awaited<
      ReturnType<
        ReturnType<typeof useGetDatabaseUrlControllerGetDatabaseUrlHook>
      >
    >
  >,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<
        ReturnType<
          ReturnType<typeof useGetDatabaseUrlControllerGetDatabaseUrlHook>
        >
      >,
      TError,
      TData
    >
  >;
  request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    useGetDatabaseUrlControllerGetDatabaseUrlInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useGetDatabaseUrlControllerGetDatabaseUrlQueryOptions = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useGetDatabaseUrlControllerGetDatabaseUrlHook>>
  >,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<
        ReturnType<
          ReturnType<typeof useGetDatabaseUrlControllerGetDatabaseUrlHook>
        >
      >,
      TError,
      TData
    >
  >;
  request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetDatabaseUrlControllerGetDatabaseUrlQueryKey();

  const getDatabaseUrlControllerGetDatabaseUrl =
    useGetDatabaseUrlControllerGetDatabaseUrlHook();

  const queryFn: QueryFunction<
    Awaited<
      ReturnType<
        ReturnType<typeof useGetDatabaseUrlControllerGetDatabaseUrlHook>
      >
    >
  > = ({ signal }) =>
    getDatabaseUrlControllerGetDatabaseUrl(requestOptions, signal);

  return {
    queryKey,
    queryFn,
    cacheTime: 0,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<
      ReturnType<
        ReturnType<typeof useGetDatabaseUrlControllerGetDatabaseUrlHook>
      >
    >,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDatabaseUrlControllerGetDatabaseUrlQueryResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof useGetDatabaseUrlControllerGetDatabaseUrlHook>>
  >
>;
export type GetDatabaseUrlControllerGetDatabaseUrlQueryError = unknown;

export const useGetDatabaseUrlControllerGetDatabaseUrl = <
  TData = Awaited<
    ReturnType<ReturnType<typeof useGetDatabaseUrlControllerGetDatabaseUrlHook>>
  >,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<
        ReturnType<
          ReturnType<typeof useGetDatabaseUrlControllerGetDatabaseUrlHook>
        >
      >,
      TError,
      TData
    >
  >;
  request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    useGetDatabaseUrlControllerGetDatabaseUrlQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get app bootstrap data
 */
export const useGetBootstrapHook = () => {
  const getBootstrap = useCustomInstance<Bootstrap>();

  return (
    params?: GetBootstrapParams,
    options?: SecondParameter<ReturnType<typeof useCustomInstance>>,
    signal?: AbortSignal,
  ) => {
    return getBootstrap(
      { url: `/api/bootstrap`, method: "get", params, signal },
      options,
    );
  };
};

export const getGetBootstrapQueryKey = (params?: GetBootstrapParams) => {
  return [`/api/bootstrap`, ...(params ? [params] : [])] as const;
};

export const useGetBootstrapInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetBootstrapHook>>>,
    GetBootstrapParams["skip"]
  >,
  TError = unknown,
>(
  params?: GetBootstrapParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetBootstrapHook>>>,
        TError,
        TData,
        Awaited<ReturnType<ReturnType<typeof useGetBootstrapHook>>>,
        QueryKey,
        GetBootstrapParams["skip"]
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetBootstrapQueryKey(params);

  const getBootstrap = useGetBootstrapHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetBootstrapHook>>>,
    QueryKey,
    GetBootstrapParams["skip"]
  > = ({ signal, pageParam }) =>
    getBootstrap({ skip: pageParam, ...params }, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    cacheTime: 0,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetBootstrapHook>>>,
    TError,
    TData,
    Awaited<ReturnType<ReturnType<typeof useGetBootstrapHook>>>,
    QueryKey,
    GetBootstrapParams["skip"]
  > & { queryKey: QueryKey };
};

export type GetBootstrapInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetBootstrapHook>>>
>;
export type GetBootstrapInfiniteQueryError = unknown;

/**
 * @summary Get app bootstrap data
 */
export const useGetBootstrapInfinite = <
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetBootstrapHook>>>,
    GetBootstrapParams["skip"]
  >,
  TError = unknown,
>(
  params?: GetBootstrapParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetBootstrapHook>>>,
        TError,
        TData,
        Awaited<ReturnType<ReturnType<typeof useGetBootstrapHook>>>,
        QueryKey,
        GetBootstrapParams["skip"]
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetBootstrapInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useGetBootstrapQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetBootstrapHook>>>,
  TError = unknown,
>(
  params?: GetBootstrapParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetBootstrapHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetBootstrapQueryKey(params);

  const getBootstrap = useGetBootstrapHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetBootstrapHook>>>
  > = ({ signal }) => getBootstrap(params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    cacheTime: 0,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetBootstrapHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetBootstrapQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetBootstrapHook>>>
>;
export type GetBootstrapQueryError = unknown;

/**
 * @summary Get app bootstrap data
 */
export const useGetBootstrap = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetBootstrapHook>>>,
  TError = unknown,
>(
  params?: GetBootstrapParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetBootstrapHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetBootstrapQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get health check status
 */
export const useGetHealthCheckHook = () => {
  const getHealthCheck = useCustomInstance<string>();

  return (
    options?: SecondParameter<ReturnType<typeof useCustomInstance>>,
    signal?: AbortSignal,
  ) => {
    return getHealthCheck(
      { url: `/api/health-check`, method: "get", signal },
      options,
    );
  };
};

export const getGetHealthCheckQueryKey = () => {
  return [`/api/health-check`] as const;
};

export const useGetHealthCheckInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetHealthCheckHook>>>
  >,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetHealthCheckHook>>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetHealthCheckQueryKey();

  const getHealthCheck = useGetHealthCheckHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetHealthCheckHook>>>
  > = ({ signal }) => getHealthCheck(requestOptions, signal);

  return {
    queryKey,
    queryFn,
    cacheTime: 0,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetHealthCheckHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetHealthCheckInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetHealthCheckHook>>>
>;
export type GetHealthCheckInfiniteQueryError = unknown;

/**
 * @summary Get health check status
 */
export const useGetHealthCheckInfinite = <
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetHealthCheckHook>>>
  >,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetHealthCheckHook>>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetHealthCheckInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useGetHealthCheckQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetHealthCheckHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetHealthCheckHook>>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetHealthCheckQueryKey();

  const getHealthCheck = useGetHealthCheckHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetHealthCheckHook>>>
  > = ({ signal }) => getHealthCheck(requestOptions, signal);

  return {
    queryKey,
    queryFn,
    cacheTime: 0,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetHealthCheckHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetHealthCheckQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetHealthCheckHook>>>
>;
export type GetHealthCheckQueryError = unknown;

/**
 * @summary Get health check status
 */
export const useGetHealthCheck = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetHealthCheckHook>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<ReturnType<typeof useGetHealthCheckHook>>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetHealthCheckQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get user stories
 */
export const useGetStoriesHook = () => {
  const getStories = useCustomInstance<Stories>();

  return (
    params?: GetStoriesParams,
    options?: SecondParameter<ReturnType<typeof useCustomInstance>>,
    signal?: AbortSignal,
  ) => {
    return getStories(
      { url: `/api/stories`, method: "get", params, signal },
      options,
    );
  };
};

export const getGetStoriesQueryKey = (params?: GetStoriesParams) => {
  return [`/api/stories`, ...(params ? [params] : [])] as const;
};

export const useGetStoriesInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetStoriesHook>>>,
    GetStoriesParams["skip"]
  >,
  TError = unknown,
>(
  params?: GetStoriesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetStoriesHook>>>,
        TError,
        TData,
        Awaited<ReturnType<ReturnType<typeof useGetStoriesHook>>>,
        QueryKey,
        GetStoriesParams["skip"]
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStoriesQueryKey(params);

  const getStories = useGetStoriesHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetStoriesHook>>>,
    QueryKey,
    GetStoriesParams["skip"]
  > = ({ signal, pageParam }) =>
    getStories({ skip: pageParam, ...params }, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    cacheTime: 0,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetStoriesHook>>>,
    TError,
    TData,
    Awaited<ReturnType<ReturnType<typeof useGetStoriesHook>>>,
    QueryKey,
    GetStoriesParams["skip"]
  > & { queryKey: QueryKey };
};

export type GetStoriesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetStoriesHook>>>
>;
export type GetStoriesInfiniteQueryError = unknown;

/**
 * @summary Get user stories
 */
export const useGetStoriesInfinite = <
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetStoriesHook>>>,
    GetStoriesParams["skip"]
  >,
  TError = unknown,
>(
  params?: GetStoriesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetStoriesHook>>>,
        TError,
        TData,
        Awaited<ReturnType<ReturnType<typeof useGetStoriesHook>>>,
        QueryKey,
        GetStoriesParams["skip"]
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetStoriesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useGetStoriesQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetStoriesHook>>>,
  TError = unknown,
>(
  params?: GetStoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetStoriesHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStoriesQueryKey(params);

  const getStories = useGetStoriesHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetStoriesHook>>>
  > = ({ signal }) => getStories(params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    cacheTime: 0,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetStoriesHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetStoriesQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetStoriesHook>>>
>;
export type GetStoriesQueryError = unknown;

/**
 * @summary Get user stories
 */
export const useGetStories = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetStoriesHook>>>,
  TError = unknown,
>(
  params?: GetStoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetStoriesHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetStoriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Create user story
 */
export const useCreateStoryHook = () => {
  const createStory = useCustomInstance<CreateStoryResponse>();

  return (
    createStoryRequest: CreateStoryRequest,
    options?: SecondParameter<ReturnType<typeof useCustomInstance>>,
  ) => {
    return createStory(
      {
        url: `/api/stories`,
        method: "post",
        headers: { "Content-Type": "application/json" },
        data: createStoryRequest,
      },
      options,
    );
  };
};

export const useCreateStoryMutationOptions = <
  TError = HttpExceptionResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateStoryHook>>>,
    TError,
    { data: CreateStoryRequest },
    TContext
  >;
  request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useCreateStoryHook>>>,
  TError,
  { data: CreateStoryRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const createStory = useCreateStoryHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useCreateStoryHook>>>,
    { data: CreateStoryRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createStory(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateStoryMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useCreateStoryHook>>>
>;
export type CreateStoryMutationBody = CreateStoryRequest;
export type CreateStoryMutationError = HttpExceptionResponse;

/**
 * @summary Create user story
 */
export const useCreateStory = <
  TError = HttpExceptionResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateStoryHook>>>,
    TError,
    { data: CreateStoryRequest },
    TContext
  >;
  request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
}) => {
  const mutationOptions = useCreateStoryMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get user story
 */
export const useGetStoryHook = () => {
  const getStory = useCustomInstance<Story>();

  return (
    id: string,
    params?: GetStoryParams,
    options?: SecondParameter<ReturnType<typeof useCustomInstance>>,
    signal?: AbortSignal,
  ) => {
    return getStory(
      { url: `/api/stories/${id}`, method: "get", params, signal },
      options,
    );
  };
};

export const getGetStoryQueryKey = (id: string, params?: GetStoryParams) => {
  return [`/api/stories/${id}`, ...(params ? [params] : [])] as const;
};

export const useGetStoryInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetStoryHook>>>,
    GetStoryParams["skip"]
  >,
  TError = unknown,
>(
  id: string,
  params?: GetStoryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetStoryHook>>>,
        TError,
        TData,
        Awaited<ReturnType<ReturnType<typeof useGetStoryHook>>>,
        QueryKey,
        GetStoryParams["skip"]
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStoryQueryKey(id, params);

  const getStory = useGetStoryHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetStoryHook>>>,
    QueryKey,
    GetStoryParams["skip"]
  > = ({ signal, pageParam }) =>
    getStory(id, { skip: pageParam, ...params }, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    cacheTime: 0,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetStoryHook>>>,
    TError,
    TData,
    Awaited<ReturnType<ReturnType<typeof useGetStoryHook>>>,
    QueryKey,
    GetStoryParams["skip"]
  > & { queryKey: QueryKey };
};

export type GetStoryInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetStoryHook>>>
>;
export type GetStoryInfiniteQueryError = unknown;

/**
 * @summary Get user story
 */
export const useGetStoryInfinite = <
  TData = InfiniteData<
    Awaited<ReturnType<ReturnType<typeof useGetStoryHook>>>,
    GetStoryParams["skip"]
  >,
  TError = unknown,
>(
  id: string,
  params?: GetStoryParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetStoryHook>>>,
        TError,
        TData,
        Awaited<ReturnType<ReturnType<typeof useGetStoryHook>>>,
        QueryKey,
        GetStoryParams["skip"]
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetStoryInfiniteQueryOptions(id, params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const useGetStoryQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetStoryHook>>>,
  TError = unknown,
>(
  id: string,
  params?: GetStoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetStoryHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStoryQueryKey(id, params);

  const getStory = useGetStoryHook();

  const queryFn: QueryFunction<
    Awaited<ReturnType<ReturnType<typeof useGetStoryHook>>>
  > = ({ signal }) => getStory(id, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    cacheTime: 0,
    refetchOnWindowFocus: false,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetStoryHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetStoryQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetStoryHook>>>
>;
export type GetStoryQueryError = unknown;

/**
 * @summary Get user story
 */
export const useGetStory = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetStoryHook>>>,
  TError = unknown,
>(
  id: string,
  params?: GetStoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<ReturnType<typeof useGetStoryHook>>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = useGetStoryQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Create inquiry
 */
export const useCreateInquiryHook = () => {
  const createInquiry = useCustomInstance<unknown>();

  return (
    createInquiryRequest: CreateInquiryRequest,
    options?: SecondParameter<ReturnType<typeof useCustomInstance>>,
  ) => {
    return createInquiry(
      {
        url: `/api/inquiries`,
        method: "post",
        headers: { "Content-Type": "application/json" },
        data: createInquiryRequest,
      },
      options,
    );
  };
};

export const useCreateInquiryMutationOptions = <
  TError = HttpExceptionResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateInquiryHook>>>,
    TError,
    { data: CreateInquiryRequest },
    TContext
  >;
  request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useCreateInquiryHook>>>,
  TError,
  { data: CreateInquiryRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const createInquiry = useCreateInquiryHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useCreateInquiryHook>>>,
    { data: CreateInquiryRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createInquiry(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateInquiryMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useCreateInquiryHook>>>
>;
export type CreateInquiryMutationBody = CreateInquiryRequest;
export type CreateInquiryMutationError = HttpExceptionResponse;

/**
 * @summary Create inquiry
 */
export const useCreateInquiry = <
  TError = HttpExceptionResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateInquiryHook>>>,
    TError,
    { data: CreateInquiryRequest },
    TContext
  >;
  request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
}) => {
  const mutationOptions = useCreateInquiryMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Create feedback
 */
export const useCreateFeedbackHook = () => {
  const createFeedback = useCustomInstance<CreateFeedbackResponse>();

  return (
    createFeedbackRequest: CreateFeedbackRequest,
    options?: SecondParameter<ReturnType<typeof useCustomInstance>>,
  ) => {
    return createFeedback(
      {
        url: `/api/feedbacks`,
        method: "post",
        headers: { "Content-Type": "application/json" },
        data: createFeedbackRequest,
      },
      options,
    );
  };
};

export const useCreateFeedbackMutationOptions = <
  TError = HttpExceptionResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateFeedbackHook>>>,
    TError,
    { data: CreateFeedbackRequest },
    TContext
  >;
  request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof useCreateFeedbackHook>>>,
  TError,
  { data: CreateFeedbackRequest },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const createFeedback = useCreateFeedbackHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof useCreateFeedbackHook>>>,
    { data: CreateFeedbackRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createFeedback(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateFeedbackMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useCreateFeedbackHook>>>
>;
export type CreateFeedbackMutationBody = CreateFeedbackRequest;
export type CreateFeedbackMutationError = HttpExceptionResponse;

/**
 * @summary Create feedback
 */
export const useCreateFeedback = <
  TError = HttpExceptionResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof useCreateFeedbackHook>>>,
    TError,
    { data: CreateFeedbackRequest },
    TContext
  >;
  request?: SecondParameter<ReturnType<typeof useCustomInstance>>;
}) => {
  const mutationOptions = useCreateFeedbackMutationOptions(options);

  return useMutation(mutationOptions);
};
